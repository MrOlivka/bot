import os
import logging
from flask import Flask, request
from telegram import Update
from telegram.ext import Application, CommandHandler, MessageHandler, filters
from telegram.ext import CallbackContext
from PIL import Image, ImageEnhance
import io
import zipfile

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
                    level=logging.INFO)

# –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω
TOKEN = os.getenv("TELEGRAM_TOKEN")
if not TOKEN:
    raise RuntimeError("–ù–µ –Ω–∞–π–¥–µ–Ω TELEGRAM_TOKEN")

# –°–æ–∑–¥–∞–µ–º Flask-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
app = Flask(__name__)

# –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –¥–ª—è —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π
os.makedirs("party_photos", exist_ok=True)

# –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ñ–æ—Ç–æ –Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
PHOTO_LIMIT = 15
user_photos = {}

async def start(update: Update, context: CallbackContext):
    await update.message.reply_text(
        "üéâ –ü—Ä–∏–≤–µ—Ç! –ó–∞–≥—Ä—É–∂–∞–π —Å—é–¥–∞ —Ñ–æ—Ç–æ —Å –≤–µ—á–µ—Ä–∏–Ω–∫–∏! –ú–∞–∫—Å–∏–º—É–º 15 —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π."
    )

def apply_filter(image_bytes: bytes) -> bytes:
    """–ù–∞–∫–ª–∞–¥—ã–≤–∞–µ–º –ø—Ä–æ—Å—Ç–æ–π —Ñ–∏–ª—å—Ç—Ä (—É–≤–µ–ª–∏—á–µ–Ω–∏–µ —è—Ä–∫–æ—Å—Ç–∏)"""
    image = Image.open(io.BytesIO(image_bytes))
    enhancer = ImageEnhance.Brightness(image)
    filtered = enhancer.enhance(1.2)

    output = io.BytesIO()
    filtered.save(output, format="JPEG")
    output.seek(0)
    return output.read()

async def handle_photo(update: Update, context: CallbackContext):
    user_id = update.message.from_user.id

    if user_photos.get(user_id, 0) >= PHOTO_LIMIT:
        await update.message.reply_text("‚ö†Ô∏è –õ–∏–º–∏—Ç 15 —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –¥–æ—Å—Ç–∏–≥–Ω—É—Ç!")
        return

    photo = await update.message.photo[-1].get_file()
    image_bytes = await photo.download_as_bytearray()

    filtered_bytes = apply_filter(image_bytes)

    file_path = os.path.join("party_photos", f"{user_id}_{user_photos.get(user_id, 0)+1}.jpg")
    with open(file_path, "wb") as f:
        f.write(filtered_bytes)

    user_photos[user_id] = user_photos.get(user_id, 0) + 1
    await update.message.reply_text(f"‚úÖ –§–æ—Ç–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ! ({user_photos[user_id]}/{PHOTO_LIMIT})")

async def download_all(update: Update, context: CallbackContext):
    """–°–æ–∑–¥–∞–µ–º ZIP —Å–æ –≤—Å–µ–º–∏ —Ñ–æ—Ç–æ"""
    zip_buffer = io.BytesIO()
    with zipfile.ZipFile(zip_buffer, "w") as zipf:
        for filename in os.listdir("party_photos"):
            path = os.path.join("party_photos", filename)
            zipf.write(path, arcname=filename)
    zip_buffer.seek(0)

    await update.message.reply_document(document=zip_buffer, filename="party_photos.zip")

# –°–æ–∑–¥–∞–µ–º Telegram-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
application = Application.builder().token(TOKEN).build()
application.add_handler(CommandHandler("start", start))
application.add_handler(CommandHandler("download", download_all))
application.add_handler(MessageHandler(filters.PHOTO, handle_photo))

# Flask route –¥–ª—è –ø—Ä–∏–µ–º–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
@app.route(f"/{TOKEN}", methods=["POST"])
def webhook():
    update = Update.de_json(request.get_json(force=True), application.bot)
    application.update_queue.put_nowait(update)
    return "OK"

# –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º webhook
@app.route("/set_webhook", methods=["GET"])
def set_webhook():
    url = f"https://{os.getenv('RENDER_EXTERNAL_HOSTNAME')}/{TOKEN}"
    success = application.bot.set_webhook(url)
    return f"Webhook set: {success}"

if __name__ == "__main__":
    port = int(os.environ.get("PORT", 5000))
    app.run(host="0.0.0.0", port=port)
